{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Couchbase Enterprise",
  "Parameters": {
    "ServerInstanceCount": {
      "Description": "Number of Couchbase Server Nodes",
      "Type": "Number",
      "Default": 4
    },
    "ServerDiskSize": {
      "Description": "Size in GB of the EBS gp2 volume on each Couchbase node",
      "Type": "Number",
      "Default": 100
    },
    "SyncGatewayInstanceCount": {
      "Description": "Number of Couchbase Sync Gateway Nodes",
      "Type": "Number",
      "Default": 2
    },
    "InstanceType": {
      "Description": "Instance type for Couchbase Nodes",
      "Type": "String",
      "Default": "m4.xlarge",
      "AllowedValues": [
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
        "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge"
      ]
    },
    "Username": {
      "Description": "Username for Couchbase administrator",
      "Type": "String"
    },
    "Password": {
      "Description": "Password for Couchbase administrator",
      "Type": "String",
      "NoEcho": true
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SSHCIDR": {
      "Description": "SSH CIDR",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "CouchbaseServer": {
      "us-east-1": { "BYOL": "ami-63af9f19" },
      "us-east-2": { "BYOL": "ami-d17742b4" },
      "us-west-1": { "BYOL": "ami-018d8061" },
      "us-west-2": { "BYOL": "ami-eea11e96" },
      "ca-central-1": { "BYOL": "ami-4723a623" },
      "eu-central-1": { "BYOL": "ami-82079eed" },
      "eu-west-1": { "BYOL": "ami-1c88ef65" },
      "eu-west-2": { "BYOL": "ami-12445e76" },
      "eu-west-3": { "BYOL": "ami-86d96ffb" },
      "ap-southeast-1": { "BYOL": "ami-6fed9513" },
      "ap-southeast-2": { "BYOL": "ami-3b0ef059" },
      "ap-south-1": { "BYOL": "ami-83b1e0ec" },
      "ap-northeast-1": { "BYOL": "ami-1eea8778" },
      "ap-northeast-2": { "BYOL": "ami-b19330df" },
      "sa-east-1": { "BYOL": "ami-f4551998" }
    },
    "CouchbaseSyncGateway": {
      "us-east-1": { "BYOL": "ami-8294a4f8" },
      "us-east-2": { "BYOL": "ami-0877426d" },
      "us-west-1": { "BYOL": "ami-288c8148" },
      "us-west-2": { "BYOL": "ami-589c2320" },
      "ca-central-1": { "BYOL": "ami-ad20a5c9" },
      "eu-central-1": { "BYOL": "ami-103aa37f" },
      "eu-west-1": { "BYOL": "ami-b696f1cf" },
      "eu-west-2": { "BYOL": "ami-6c445e08" },
      "eu-west-3": { "BYOL": "ami-c9d86eb4" },
      "ap-southeast-1": { "BYOL": "ami-10eb936c" },
      "ap-southeast-2": { "BYOL": "ami-a610eec4" },
      "ap-south-1": { "BYOL": "ami-898cdde6" },
      "ap-northeast-1": { "BYOL": "ami-b9e588df" },
      "ap-northeast-2": { "BYOL": "ami-38933056" },
      "sa-east-1": { "BYOL": "ami-3654185a" }
    }
  },
  "Resources": {
    "ServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "ServerLaunchConfiguration" },
        "MinSize": 1,
        "MaxSize": 100,
        "DesiredCapacity": { "Ref": "ServerInstanceCount" }
      }
    },
    "ServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "CouchbaseServer", { "Ref": "AWS::Region" }, "BYOL" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "CouchbaseSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "EbsOptimized": true,
        "IamInstanceProfile": { "Ref": "CouchbaseInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "DeleteOnTermination" : true }
          },
          {
            "DeviceName" : "/dev/sdk",
            "Ebs" : {
              "VolumeSize": { "Ref": "ServerDiskSize" },
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash\n",
                "echo 'Running startup script...'\n",
                "adminUsername=", { "Ref": "Username" }, "\n",
                "adminPassword=", { "Ref": "Password" }, "\n",
                "stackName=", { "Ref": "AWS::StackName" }, "\n",

                "#######################################################\n",
                "##################### Format Disk #####################\n",
                "#######################################################\n",
                "echo \"Formatting disk...\"\n",

                "DEVICE=/dev/sdk\n",
                "MOUNTPOINT=/mnt/datadisk\n",

                "echo \"Creating the filesystem.\"\n",
                "mkfs -t ext4 ${DEVICE}\n",

                "echo \"Updating fstab\"\n",
                "LINE=\"${DEVICE}\t${MOUNTPOINT}\text4\tdefaults,nofail\t0\t2\"\n",
                "echo -e ${LINE} >> /etc/fstab\n",

                "echo \"Mounting the disk\"\n",
                "mkdir $MOUNTPOINT\n",
                "mount -a\n",

                "echo \"Changing permissions\"\n",
                "chown couchbase $MOUNTPOINT\n",
                "chgrp couchbase $MOUNTPOINT\n",

                "#######################################################\n",
                "################# Configure Couchbase #################\n",
                "#######################################################\n",
                "echo \"Configuring Couchbase...\"\n",

                "yum -y update\n",
                "yum -y install jq\n",

                "region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.region'  \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.instanceId' \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "rallyAutoscalingGroup=$(aws ec2 describe-instances \\\n",
                "  --region ${region} \\\n",
                "  --instance-ids ${instanceID} \\\n",
                "  | jq '.Reservations[0]|.Instances[0]|.Tags[] | select( .Key == \"aws:autoscaling:groupName\") | .Value' \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "rallyAutoscalingGroupInstanceIDs=$(aws autoscaling describe-auto-scaling-groups \\\n",
                "  --region ${region} \\\n",
                "  --query 'AutoScalingGroups[*].Instances[*].InstanceId' \\\n",
                "  --auto-scaling-group-name ${rallyAutoscalingGroup} \\\n",
                "  | grep \"i-\" | sed 's/ //g' | sed 's/\"//g' |sed 's/,//g' | sort)\n",

                "rallyInstanceID=`echo ${rallyAutoscalingGroupInstanceIDs} | cut -d \" \" -f1`\n",

                "# Check if any IDs are already the rally point and overwrite rallyInstanceID if so\n",
                "rallyAutoscalingGroupInstanceIDsArray=(`echo $rallyAutoscalingGroupInstanceIDs`)\n",
                "for i in ${rallyAutoscalingGroupInstanceIDsArray[@]}; do\n",
                "  tags=`aws ec2 describe-tags --region ${region}  --filter \"Name=tag:Name,Values=*Rally\" \"Name=resource-id,Values=$i\"`\n",
                "  tags=`echo $tags | jq '.Tags'`\n",
                "  if [ \"$tags\" != \"[]\" ]\n",
                "  then\n",
                "    rallyInstanceID=$i\n",
                "  fi\n",
                "done\n",

                "rallyPublicDNS=$(aws ec2 describe-instances \\\n",
                "    --region ${region} \\\n",
                "    --query  'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' \\\n",
                "    --instance-ids ${rallyInstanceID} \\\n",
                "    --output text)\n",

                "nodePublicDNS=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",

                "echo \"Using the settings:\"\n",
                "echo adminUsername \\'$adminUsername\\'\n",
                "echo adminPassword \\'$adminPassword\\'\n",
                "echo stackName \\'$stackName\\'\n",
                "echo rallyPublicDNS \\'$rallyPublicDNS\\'\n",
                "echo region \\'$region\\'\n",
                "echo instanceID \\'$instanceID\\'\n",
                "echo nodePublicDNS \\'$nodePublicDNS\\'\n",

                "if [[ ${rallyPublicDNS} == ${nodePublicDNS} ]]\n",
                "then\n",
                "  aws ec2 create-tags \\\n",
                "    --region ${region} \\\n",
                "    --resources ${instanceID} \\\n",
                "    --tags Key=Name,Value=${stackName}-ServerRally\n",
                "else\n",
                "  aws ec2 create-tags \\\n",
                "    --region ${region} \\\n",
                "    --resources ${instanceID} \\\n",
                "    --tags Key=Name,Value=${stackName}-Server\n",
                "fi\n",

                "cd /opt/couchbase/bin/\n",

                "echo \"Running couchbase-cli node-init\"\n",
                "output=\"\"\n",
                "while [[ ! $output =~ \"SUCCESS\" ]]\n",
                "do\n",
                "  output=`./couchbase-cli node-init \\\n",
                "    --cluster=$nodePublicDNS \\\n",
                "    --node-init-hostname=$nodePublicDNS \\\n",
                "    --node-init-data-path=/mnt/datadisk/data \\\n",
                "    --node-init-index-path=/mnt/datadisk/index \\\n",
                "    --user=$adminUsername \\\n",
                "    --pass=$adminPassword`\n",
                "  echo node-init output \\'$output\\'\n",
                "  sleep 10\n",
                "done\n",

                "if [[ $rallyPublicDNS == $nodePublicDNS ]]\n",
                "then\n",
                "  totalRAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')\n",
                "  dataRAM=$((50 * $totalRAM / 100000))\n",
                "  indexRAM=$((25 * $totalRAM / 100000))\n",

                "  echo \"Running couchbase-cli cluster-init\"\n",
                "  ./couchbase-cli cluster-init \\\n",
                "    --cluster=$nodePublicDNS \\\n",
                "    --cluster-username=$adminUsername \\\n",
                "    --cluster-password=$adminPassword \\\n",
                "    --cluster-ramsize=$dataRAM \\\n",
                "    --cluster-index-ramsize=$indexRAM \\\n",
                "    --services=data,index,query,fts\n",
                "else\n",
                "  echo \"Running couchbase-cli server-add\"\n",
                "  output=\"\"\n",
                "  while [[ $output != \"Server $nodePublicDNS:8091 added\" && ! $output =~ \"Node is already part of cluster.\" ]]\n",
                "  do\n",
                "    output=`./couchbase-cli server-add \\\n",
                "      --cluster=$rallyPublicDNS \\\n",
                "      --user=$adminUsername \\\n",
                "      --pass=$adminPassword \\\n",
                "      --server-add=$nodePublicDNS \\\n",
                "      --server-add-username=$adminUsername \\\n",
                "      --server-add-password=$adminPassword \\\n",
                "      --services=data,index,query,fts`\n",
                "    echo server-add output \\'$output\\'\n",
                "    sleep 10\n",
                "  done\n",

                "  echo \"Running couchbase-cli rebalance\"\n",
                "  output=\"\"\n",
                "  while [[ ! $output =~ \"SUCCESS\" ]]\n",
                "  do\n",
                "    output=`./couchbase-cli rebalance \\\n",
                "    --cluster=$rallyPublicDNS \\\n",
                "    --user=$adminUsername \\\n",
                "    --pass=$adminPassword`\n",
                "    echo rebalance output \\'$output\\'\n",
                "    sleep 10\n",
                "  done\n",
                "fi\n"
              ]
            ]
          }
        }
      }
    },
    "SyncGatewayAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "SyncGatewayLaunchConfiguration" },
        "MinSize": 0,
        "MaxSize": 100,
        "DesiredCapacity": { "Ref": "SyncGatewayInstanceCount" }
      }
    },
    "SyncGatewayLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "CouchbaseSyncGateway", { "Ref": "AWS::Region" }, "BYOL" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "CouchbaseSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "EbsOptimized": true,
        "IamInstanceProfile": { "Ref": "CouchbaseInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "DeleteOnTermination" : true }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash\n",
                "echo 'Running startup script...'\n",
                "stackName=", { "Ref": "AWS::StackName" }, "\n",

                "yum -y update\n",
                "yum -y install jq\n",

                "region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.region'  \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.instanceId' \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "echo \"Using the settings:\"\n",
                "echo stackName \\'$stackName\\'\n",
                "echo region \\'$region\\'\n",
                "echo instanceID \\'$instanceID\\'\n",

                "aws ec2 create-tags \\\n",
                "  --region ${region} \\\n",
                "  --resources ${instanceID} \\\n",
                "  --tags Key=Name,Value=${stackName}-SyncGateway\n",

                "file=\"/opt/sync_gateway/etc/sync_gateway.json\"\n",
                "echo '\n",
                "{\n",
                "  \"interface\": \"0.0.0.0:4984\",\n",
                "  \"adminInterface\": \"0.0.0.0:4985\",\n",
                "  \"log\": [\"*\"]\n",
                "}\n",
                "' > ${file}\n",
                "chmod 755 ${file}\n",
                "chown sync_gateway ${file}\n",
                "chgrp sync_gateway ${file}\n",

                "# Need to restart to load the changes\n",
                "service sync_gateway stop\n",
                "service sync_gateway start\n"
              ]
            ]
          }
        }
      }
    },
    "CouchbaseInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {"Roles": [{"Ref": "CouchbaseRole"}]}
    },
    "CouchbaseRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CouchbasePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeTags",
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CouchbaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Enable SSH and Couchbase Ports",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "SSHCIDR" } },
          { "IpProtocol": "tcp", "FromPort": 4369, "ToPort": 4369, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 4984, "ToPort": 4985, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8091, "ToPort": 8094, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9100, "ToPort": 9105, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9998, "ToPort": 9999, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 11207, "ToPort": 11215, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 18091, "ToPort": 18093, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 21100, "ToPort": 21299, "CidrIp": "0.0.0.0/0" }
        ]
      }
    }
  }
}
